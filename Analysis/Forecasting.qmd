---
title: "Forecasting"
date: "March 17, 2024"
date-modified: "last-modified"
toc: true
execute:
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
editor: visual
---

# 1. Issues to address

-   To carry out decomposition of time series data

-   To plot time series data

-   To carry out forecasting of time series data

# 2. Installing and loading the required libraries

```{r}
pacman::p_load(tidyverse, lubridate, DT, ggplot2, plotly, ggthemes, timetk, modeltime, tidymodels, xgboost, recipes, parsnip, earth)

```

# 3. Importing the Dataset

```{r}

weatherdata <- read_rds("data/weather_data_imputed.rds")
```

# 4. Decomposition of Time Series Object

```{r}
weatherdata %>%
  filter(station == "Admiralty") %>%
  plot_seasonal_diagnostics(DATE, mean_monthly_temperature)

```

```{r}
weatherdata %>%
  filter(station == "Admiralty") %>%
  plot_seasonal_diagnostics(DATE, monthly_rainfall)

```

```{r}
weatherdata %>%
  filter(station == "Admiralty") %>%
  plot_stl_diagnostics(DATE, mean_monthly_temperature,
                       .frequency = "auto", .trend = "auto",
                        .feature_set = c("observed", "season", "trend", "remainder"))

```

```{r}
weatherdata %>%
  filter(station == "Admiralty") %>%
  plot_stl_diagnostics(DATE, min_monthly_temperature,
                       .frequency = "auto", .trend = "auto",
                        .feature_set = c("observed", "season", "trend", "remainder"))

```

```{r}
weatherdata %>%
  filter(station == "Admiralty") %>%
  plot_stl_diagnostics(DATE, max_monthly_temperature,
                       .frequency = "auto", .trend = "auto",
                        .feature_set = c("observed", "season", "trend", "remainder"))

```

```{r}
weatherdata %>%
  filter(station == "Admiralty") %>%
  plot_stl_diagnostics(DATE, monthly_rainfall,
                       .frequency = "auto", .trend = "auto",
                        .feature_set = c("observed", "season", "trend", "remainder"))

```

# 5. Forecasting with Modeltime

Going to develop a few basic models - ARIMA - Exponential Smoothing - Linear Regression - MARS (Multivariate Adaptive Regression Splines)

## 5.1 Selecting the data

We use mean monthly temperature of Admiralty station as an example.

First we will select the relevant data column

```{r}
glimpse(weatherdata)

```

```{r}
weatherdata_meantemp <- weatherdata %>%
  filter(station == "Admiralty") %>%
  select(date = DATE, value = mean_monthly_temperature)

weatherdata_meantemp 
```

## 5.2 Visualise the dataset

```{r}
weatherdata_meantemp %>%
  plot_time_series(date, value)

```

## 5.3 Train/Test

```{r}
splits <- weatherdata_meantemp %>%
  initial_time_split(prop = 0.8)

splits
training(splits)
testing(splits)
```

## 5.4 Creating and Fitting Models

### 5.4.1 Model 1 - Auto ARIMA

```{r}
model_fit_arima_no_boost <- arima_reg() %>%
  set_engine(engine = "auto_arima") %>%
  fit(value ~ date, data = training(splits))

```

### 5.4.2 Boosted Auto ARIMA

Create a boosted ARIMA. Boosting uses XGBOost to model the ARIMA errors.

```{r}
model_fit_arima_boosted <- arima_boost(
    min_n = 2,
    learn_rate = 0.015
) %>%
    set_engine(engine = "auto_arima_xgboost") %>%
    fit(value ~ date + as.numeric(date) + factor(month(date, label = TRUE), ordered = F),
        data = training(splits))


```

### 5.4.3 Exponential Smoothing

```{r}
model_fit_ets <- exp_smoothing() %>%
    set_engine(engine = "ets") %>%
    fit(value ~ date, data = training(splits))

```

```{r}
model_fit_ets

```

```{r}
calibration_ets <- model_fit_ets %>%
    modeltime_calibrate(new_data = testing(splits))

calibration_ets
```

```{r}
forecast_results <- calibration_ets %>%
    modeltime_forecast(
        new_data    = testing(splits),
        actual_data = weatherdata_meantemp
    ) 

datatable(forecast_results)
```

```{r}
calibration_ets %>%
    modeltime_forecast(
        new_data    = testing(splits),
        actual_data = weatherdata_meantemp
    ) %>%
    plot_modeltime_forecast(
      .legend_max_width = 25
    )


```

### 5.4.4 Accuracy Metrics

```{r}

accuracy_metrics <- calibration_ets %>%
  modeltime_accuracy() 


accuracy_metrics$mae
accuracy_metrics$mape
accuracy_metrics$rmse
```

### 5.4.5 Prophet

```{r}
model_fit_prophet <- prophet_reg() %>%
    set_engine(engine = "prophet") %>%
    fit(value ~ date, data = training(splits))

```

### 5.4.6 Linear Regression

```{r}
model_fit_lm <- linear_reg() %>%
    set_engine("lm") %>%
    fit(value ~ as.numeric(date) + factor(month(date, label = TRUE), ordered = FALSE),
        data = training(splits))

```

### 5.4.7 MARS

```{r}

model_spec_mars <- mars(mode = "regression") %>%
    set_engine("earth") 

recipe_spec <- recipe(value ~ date, data = training(splits)) %>%
    step_date(date, features = "month", ordinal = FALSE) %>%
    step_mutate(date_num = as.numeric(date)) %>%
    step_normalize(date_num) %>%
    step_rm(date)
  
wflw_fit_mars <- workflow() %>%
    add_recipe(recipe_spec) %>%
    add_model(model_spec_mars) %>%
    fit(training(splits))
```

## 5.5 Add Fitted Models to a Model table

```{r}
models_tbl <- modeltime_table(
    model_fit_arima_no_boost,
    model_fit_arima_boosted,
    model_fit_ets,
    model_fit_prophet,
    model_fit_lm,
    wflw_fit_mars
)

models_tbl

```

## 5.6 Calibrate the model to a testing set

```{r}
calibration_tbl <- models_tbl %>%
    modeltime_calibrate(new_data = testing(splits))

calibration_tbl

```

## 5.7 Testing Set Forecast & Accuracy Evaluation

### 5.7.1 Visualising forecast test

```{r}
calibration_tbl %>%
    modeltime_forecast(
        new_data    = testing(splits),
        actual_data = weatherdata_meantemp
    ) %>%
    plot_modeltime_forecast(
      .legend_max_width = 25
    )

```

### 5.7.2 Accuracy Metrics

```{r}

calibration_tbl %>%
    modeltime_accuracy() %>%
    table_modeltime_accuracy()

```

## 5.8 Refit to full dataset and forecast forward

```{r}
refit_tbl <- calibration_tbl %>%
    modeltime_refit(data = weatherdata_meantemp)

refit_tbl %>%
    modeltime_forecast(h = "36 months", actual_data = weatherdata_meantemp) %>%
    plot_modeltime_forecast(
      .legend_max_width = 25

    )


```

# 6. Forecasting with Modeltime (Rainfall Data)

Going to develop a few basic models - ARIMA - Exponential Smoothing - Linear Regression - MARS (Multivariate Adaptive Regression Splines)

## 6.1 Selecting the data

We use mean monthly temperature of Admiralty station as an example.

First we will select the relevant data column

```{r}
weatherdata_rf <- weatherdata %>%
  filter(station == "Admiralty") %>%
  select(date = DATE, value = monthly_rainfall)

weatherdata_rf 
```

## 6.2 Visualise the dataset

```{r}
weatherdata_rf %>%
  plot_time_series(date, value)

```

## 6.3 Train/Test

```{r}
splits <- weatherdata_rf %>%
  initial_time_split(prop = 0.8)

```

## 6.4 Creating and Fitting Models

### 6.4.1 Model 1 - Auto ARIMA

```{r}
model_fit_arima_no_boost <- arima_reg() %>%
  set_engine(engine = "auto_arima") %>%
  fit(value ~ date, data = training(splits))

```

### 6.4.2 Boosted Auto ARIMA

Create a boosted ARIMA. Boosting uses XGBOost to model the ARIMA errors.

```{r}
model_fit_arima_boosted <- arima_boost(
    min_n = 2,
    learn_rate = 0.015
) %>%
    set_engine(engine = "auto_arima_xgboost") %>%
    fit(value ~ date + as.numeric(date) + factor(month(date, label = TRUE), ordered = F),
        data = training(splits))


```

### 6.4.3 Exponential Smoothing

```{r}
model_fit_ets <- exp_smoothing() %>%
    set_engine(engine = "ets") %>%
    fit(value ~ date, data = training(splits))

```

### 6.4.4 Prophet

```{r}
model_fit_prophet <- prophet_reg() %>%
    set_engine(engine = "prophet") %>%
    fit(value ~ date, data = training(splits))

```

### 6.4.5 Linear Regression

```{r}
model_fit_lm <- linear_reg() %>%
    set_engine("lm") %>%
    fit(value ~ as.numeric(date) + factor(month(date, label = TRUE), ordered = FALSE),
        data = training(splits))

```

### 6.4.6 MARS

```{r}

model_spec_mars <- mars(mode = "regression") %>%
    set_engine("earth") 

recipe_spec <- recipe(value ~ date, data = training(splits)) %>%
    step_date(date, features = "month", ordinal = FALSE) %>%
    step_mutate(date_num = as.numeric(date)) %>%
    step_normalize(date_num) %>%
    step_rm(date)
  
wflw_fit_mars <- workflow() %>%
    add_recipe(recipe_spec) %>%
    add_model(model_spec_mars) %>%
    fit(training(splits))
```

## 6.5 Add Fitted Models to a Model table

```{r}
models_tbl <- modeltime_table(
    model_fit_arima_no_boost,
    model_fit_arima_boosted,
    model_fit_ets,
    model_fit_prophet,
    model_fit_lm,
    wflw_fit_mars
)

models_tbl

```

## 6.6 Calibrate the model to a testing set

```{r}
calibration_tbl <- models_tbl %>%
    modeltime_calibrate(new_data = testing(splits))

calibration_tbl

```

## 6.7 Testing Set Forecast & Accuracy Evaluation

### 6.7.1 Visualising forecast test

```{r}
calibration_tbl %>%
    modeltime_forecast(
        new_data    = testing(splits),
        actual_data = weatherdata_rf
    ) %>%
    plot_modeltime_forecast(
      .legend_max_width = 25
    )

```

### 6.7.2 Accuracy Metrics

```{r}

calibration_tbl %>%
    modeltime_accuracy() %>%
    table_modeltime_accuracy()

```

## 6.8 Refit to full dataset and forecast forward

```{r}
refit_tbl <- calibration_tbl %>%
    modeltime_refit(data = weatherdata_rf)

refit_tbl %>%
    modeltime_forecast(h = "36 months", actual_data = weatherdata_rf) %>%
    plot_modeltime_forecast(
      .legend_max_width = 25)


```

## 6.9 Removing anomalies

```{r}

anomalize_tbl <- weatherdata %>%
  group_by(station) %>%
  anomalize(
    .date_var = DATE,
    .value = monthly_rainfall,
    .iqr_alpha = 0.05,
    .max_anomalies = 0.20,
    .message = FALSE
  )

glimpse(anomalize_tbl)

```

```{r}
anomalize_tbl %>%
  group_by(station) %>%
  filter(station == c("Admiralty", "Ang Mo Kio", "Changi")) %>%
    plot_anomalies_decomp(
        .date_var = DATE
    )

```

```{r}
anomalize_tbl %>%
  group_by(station) %>%
  filter(station == c("Clementi", "Ang Mo Kio", "Changi")) %>%
  plot_anomalies(
        DATE,
        .facet_ncol = 3
    )

```

```{r}
anomalize_tbl %>%
    group_by(station) %>%
   filter(station == c("Admiralty", "Ang Mo Kio", "Changi")) %>%
    plot_anomalies_cleaned(
        DATE,
        .facet_ncol = 2
    )

```
